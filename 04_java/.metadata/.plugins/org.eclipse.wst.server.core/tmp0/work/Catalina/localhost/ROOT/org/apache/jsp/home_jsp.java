/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2024-03-07 05:57:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.MangoChat.LoginDB.L_Dao;
import com.MangoChat.LoginDB.L_Dto;
import com.MangoChat.RoomDB.R_Dto;
import java.util.ArrayList;
import com.MangoChat.util.Util;
import com.MangoChat.RoomDB.R_Dao;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.MangoChat.RoomDB.R_Dao");
    _jspx_imports_classes.add("com.MangoChat.LoginDB.L_Dao");
    _jspx_imports_classes.add("com.MangoChat.util.Util");
    _jspx_imports_classes.add("com.MangoChat.LoginDB.L_Dto");
    _jspx_imports_classes.add("com.MangoChat.RoomDB.R_Dto");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>채팅 로비 메인</title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/styleCSS/home.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/styleCSS/home0.1.1v.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/styleCSS/chatRoom.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

	String userName = (String) session.getAttribute("userName");
	String userNo = (String) session.getAttribute("userNo");
	String userTag = (String) session.getAttribute("userTag");
	String mode = request.getParameter("mode");
	String roomNo = request.getParameter("roomNo");
	String mag = request.getParameter("mag");
	
      out.write("\r\n");
      out.write("	<div id=\"main\">\r\n");
      out.write("	\r\n");
      out.write("<!-- 		<header id=\"top\"> -->\r\n");
      out.write("<!-- 			<a href=\"/chat/login\"><button type=\"button\">로그아웃</button></a> -->\r\n");
      out.write("<!-- 			<!-- 임시 로그아웃 버튼 --> \r\n");
      out.write("<!-- 		</header> -->\r\n");
      out.write("		<section id=\"mid\">\r\n");
      out.write("		 <!-- 왼쪽 채팅방 목록 시작 -->\r\n");
      out.write("				<div id=\"left_tool_bar\">\r\n");
      out.write("				<!--채팅 목록 -->\r\n");
      out.write("				");

				R_Dao R_dao = new R_Dao();
				L_Dao L_dao = new L_Dao();
				Util util = new Util();
				ArrayList<String> roomList = R_dao.roomList(userNo); // 로그인한 유저의 정보를 받아 소속되어 있는 채팅방의 리스트를 뽑는다
				if (roomList.size() > 0) {
					// 채팅방에 입장해 있지 않을때 다른것이 출력되게
// 					for (String roomlist : roomList) { 0.1.1 버그발생~~~~~~
// 						R_Dto info = R_dao.roomInfo(roomlist);
// 						L_Dto name = util.userName(info.masterUserNo);
// 						int count = util.roomUserCount(roomlist);
					int maxRoomsToShow = Math.min(8, roomList.size());
					for (int i = 0; i < maxRoomsToShow; i++) {
					    String roomlist = roomList.get(i);
					    R_Dto info = R_dao.roomInfo(roomlist);
					    L_Dto name = util.userName(info.masterUserNo);
					    int count = util.roomUserCount(roomlist);

      out.write("\r\n");
      out.write("<!-- 					이 칸을 누르면 채팅방을 변경할수있음 -->\r\n");
      out.write("				<!-- div 에 onclick 을 추가하고 script 에 특정 url로 이동할수있게 처리 -->\r\n");
      out.write("				<div class=\"Channel\" onclick=\"chat('");
      out.print(roomlist);
      out.write("')\" onmouseover=\"changeText(this,'");
      out.print(info.roomName);
      out.write("', '");
      out.print(name.userName);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(name.userTag);
      out.write("', '");
      out.print(count);
      out.write("', '");
      out.print(info.userMax);
      out.write("')\" onmouseout=\"restoreText(this, '");
      out.print(info.roomName);
      out.write("')\"> \r\n");
      out.write("  				");
      out.print(info.roomName);
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("				<script>\r\n");
      out.write("					function chat(roomNo) {\r\n");
      out.write("						window.location.href = \"/chat/index?roomNo=\" + roomNo;\r\n");
      out.write("					}\r\n");
      out.write("					function changeText(element, roomName, userName, userTag, count, userMax) {\r\n");
      out.write("					    element.innerHTML = '['+roomName+']<br> Master :'+userName+'#'+userTag+'<br> Member'+count+'/'+userMax;\r\n");
      out.write("					}\r\n");
      out.write("				    function restoreText(element, roomName) {\r\n");
      out.write("				        element.innerHTML = roomName;\r\n");
      out.write("				    }\r\n");
      out.write("				</script>\r\n");
      out.write("				");

				}
				} else {
				
      out.write("채팅방이 없는 아싸입니다");

				}
				
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("<!-- 			<div id=\"midCenter\"> -->\r\n");
      out.write("				<div id=\"mid_chat_area\">\r\n");
      out.write("				<div id=\"right_tool_button\">알림</div>\r\n");
      out.write("				<div id=\"right_tool_button_Message\">친추</div>\r\n");
      out.write("<div id=\"right_tool_bar\">\r\n");
      out.write("			<!--  임시 알림 확인 버튼 -->\r\n");
      out.write("<!-- 			<a href=\"/invite.jsp\"><button>알림 확인</button></a> -->\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "invite.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("roomNo", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(roomNo), request.getCharacterEncoding()), out, true);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<div id=\"right_tool_bar_Message\">\r\n");
      out.write("<!-- 			<a href=\"/friendSearch.jsp\"><button type=\"button\" >친구찾기 이동</button></a> -->\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "friendSearch.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("roomNo", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(roomNo), request.getCharacterEncoding()), out, true);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("					<div id=\"overlay\">닫기</div>\r\n");
      out.write("		<script>\r\n");
      out.write("// JavaScript 코드 여기에 붙여넣기\r\n");
      out.write("var toggleButton = document.getElementById('right_tool_button');\r\n");
      out.write("var toggleButtonMessage = document.getElementById('right_tool_button_Message');\r\n");
      out.write("var rightToolBar = document.getElementById('right_tool_bar');\r\n");
      out.write("var rightToolBarMessage = document.getElementById('right_tool_bar_Message');\r\n");
      out.write("var overlay = document.getElementById('overlay');\r\n");
      out.write("\r\n");
      out.write("toggleButton.onclick = function() { \r\n");
      out.write("	rightToolBarMessage.style.display = 'none';\r\n");
      out.write("    rightToolBar.style.display = 'block';\r\n");
      out.write("    overlay.style.display = 'block';\r\n");
      out.write("};\r\n");
      out.write("  \r\n");
      out.write("toggleButtonMessage.onclick = function() { \r\n");
      out.write("    rightToolBar.style.display = 'none';\r\n");
      out.write("	rightToolBarMessage.style.display = 'block';\r\n");
      out.write("    overlay.style.display = 'block';\r\n");
      out.write("};\r\n");
      out.write("  \r\n");
      out.write("overlay.onclick = function() {\r\n");
      out.write("    rightToolBar.style.display = 'none';\r\n");
      out.write("	rightToolBarMessage.style.display = 'none';\r\n");
      out.write("    overlay.style.display = 'none';\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("					<!--채팅창 보이게 하는거 -->\r\n");
      out.write("					");

					if (roomNo != null && !roomNo.equals(null)) {
					
      out.write("\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "chatting.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("roomNo", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(roomNo), request.getCharacterEncoding()), out, true);
      out.write("\r\n");
      out.write("					");

					} else {
					
      out.write("\r\n");
      out.write("<!-- 					채팅방 접속하지않음 -->\r\n");
      out.write("					");

					}
					
      out.write("\r\n");
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			<div id=\"midRight\">\r\n");
      out.write("				<div id=\"midProfile\">\r\n");
      out.write("				<div class=\"arrayDIV\">\r\n");
      out.write("					<img id=\"ProfileImage\"\r\n");
      out.write("						src=\"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png\">\r\n");
      out.write("					<div id=\"ProfileText\"><b>");
      out.print(userName);
      out.write("</b><a class=\"userTag\">#");
      out.print(userTag);
      out.write("</a>님<br>반갑습니다.\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("					<a href=\"/chat/login\"><button type=\"button\">로그아웃</button></a>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div id=\"midFriend\">\r\n");
      out.write("					<div id=\"friendtop\">\r\n");
      out.write("					<h3>친구목록 ▼</h3>\r\n");
      out.write("<!-- 					<a href=\"/friendSearch.jsp\">검색창</a> -->\r\n");
      out.write("					");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "friendList.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("roomNo", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(roomNo), request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("mag", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode(String.valueOf(mag), request.getCharacterEncoding()), out, true);
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</section>\r\n");
      out.write("\r\n");
      out.write("		<footer id=\"bot\">\r\n");
      out.write("			<form action=\"/chat/CreateRoom\" method=\"get\">\r\n");
      out.write("				<input name=\"roomName\" placeholder=\"방 이름\">\r\n");
      out.write("				<!-- 방을 생성 -->\r\n");
      out.write("				<input type=\"number\" min=\"2\" max=\"30\" name=\"userMax\" placeholder=\"최대인원수\">\r\n");
      out.write("				<input type=\"submit\" value=\"방만들기\">\r\n");
      out.write("			</form>\r\n");
      out.write("\r\n");
      out.write("		</footer>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
