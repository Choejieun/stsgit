/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2024-03-06 02:27:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.MangoChat.util.Util;
import com.MangoChat.LoginDB.L_Dto;
import com.MangoChat.ChatDB.C_Dto;
import com.MangoChat.ChatDB.C_Dao;
import java.util.ArrayList;

public final class chatting_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.MangoChat.ChatDB.C_Dao");
    _jspx_imports_classes.add("com.MangoChat.ChatDB.C_Dto");
    _jspx_imports_classes.add("com.MangoChat.util.Util");
    _jspx_imports_classes.add("com.MangoChat.LoginDB.L_Dto");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/styleCSS/chatRoom.css\">\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>채팅창</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<script>\r\n");
      out.write("/*  0.1.0 업데이트 - 스크롤 CSS에서 처리로 변경\r\n");
      out.write("        function addContent() {\r\n");
      out.write("            window.scrollTo(0, document.body.scrollHeight);\r\n");
      out.write("        } \r\n");
      out.write("        */\r\n");
      out.write("        function handleKeyPress(event) {\r\n");
      out.write("            // Enter 키 (keyCode 13)를 누를 때 글 추가 함수 호출\r\n");
      out.write("            if (event.keyCode === 13) {\r\n");
      out.write("                addContent();\r\n");
      out.write("            }\r\n");
      out.write("    </script>\r\n");
      out.write("	<div id=\"warp\">\r\n");
      out.write("		<div id=\"ChatArea\">\r\n");
      out.write("			");

			String roomNo = request.getParameter("roomNo");
			if (roomNo != null || !roomNo.equals(null)) {
				C_Dao dao = new C_Dao();
				ArrayList<C_Dto> chatList = dao.chattingList(roomNo);
				String userNo = (String) session.getAttribute("userNo");
				// home 에서 딸려오는 roomNo, 그리고 접속한 유저의 고유번호를 불러오기
			
      out.write("\r\n");
      out.write("			<div id=\"chattingList\" class=\"divMatginAuto\">\r\n");
      out.write("				");

				if (chatList.size() > 0) {
				Util util = new Util();
					for (C_Dto a : chatList) {
						L_Dto name = util.userName(a.userNo);
						// 채팅을 입력했던 유저와 지금 접속해있는 유저의 고유번호가 다를때 출력되는 방식이 다르게 만들기 위한 처리
						if (!a.userNo.equals(userNo)) {
				
      out.write("\r\n");
      out.write("\r\n");
      out.write("				<!-- 				유저 채팅 창 -->\r\n");
      out.write("				<div>\r\n");
      out.write("					<div class=\"Chat_main_box\">\r\n");
      out.write("						<div class=\"Chat_user_img\">\r\n");
      out.write("							<!-- 							<img alt=\"#\" src=\"관심이.jpg\"> -->\r\n");
      out.write("							<img\r\n");
      out.write("								src=\"https://i.ibb.co/xXm2sGH/1-Gx-B1-PLCKMEp-GN6f-Fy-Nbp-LBa-DOt-Cq09et-SE-B97-Sw-I19-He-N1pjw-Rp-giymw-Mv-Xgd-U3k4o-TVw-Nf4ctyon.webp\"\r\n");
      out.write("								alt=\"1-Gx-B1-PLCKMEp-GN6f-Fy-Nbp-LBa-DOt-Cq09et-SE-B97-Sw-I19-He-N1pjw-Rp-giymw-Mv-Xgd-U3k4o-TVw-Nf4ctyon\"\r\n");
      out.write("								border=\"0\">\r\n");
      out.write("							<!-- 프로필이미지 연동 -->\r\n");
      out.write("						</div>\r\n");
      out.write("						<div class=\"Chat_user_box\">\r\n");
      out.write("							<div class=\"Chat_user_names_box\">\r\n");
      out.write("								<h1>");
      out.print(name.userName);
      out.write('#');
      out.print(name.userTag );
      out.write("</h1>\r\n");
      out.write("								");
      out.print(a.time);
      out.write("\r\n");
      out.write("							</div>\r\n");
      out.write("							<div class=\"Chat_User_Main_Chat\">\r\n");
      out.write("								");
      out.print(a.chatContent);
      out.write("\r\n");
      out.write("							</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<!-- 				유저 채팅 창 -->\r\n");
      out.write("				");

				} else {
				
      out.write("\r\n");
      out.write("				<!-- 				내 채팅 창 -->\r\n");
      out.write("				<div id=\"mydiv\">\r\n");
      out.write("					<div class=\"Chat_MY_main_box\">\r\n");
      out.write("						<div class=\"Chat_MY_user_box\">\r\n");
      out.write("							<div class=\"Chat_MY_user_names_box\">");
      out.print(a.time);
      out.write("</div>\r\n");
      out.write("							<div class=\"Chat_MY_User_Main_Chat\">");
      out.print(a.chatContent);
      out.write("</div>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<!-- 				내 채팅 창 -->\r\n");
      out.write("				");

				}
				}
				} else {
				
      out.write("\r\n");
      out.write("				채팅이 없습니다.\r\n");
      out.write("				");

				}
				}
			
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div id=\"Chat_Input_area\">\r\n");
      out.write("			<!-- 채팅 -->\r\n");
      out.write("			<form action=\"/chat/chatting\" method=\"get\">\r\n");
      out.write("				<input type=\"hidden\" name=\"roomNo\" value=");
      out.print(roomNo);
      out.write(">\r\n");
      out.write("				<div class=\"textarea\">\r\n");
      out.write("					<input class=\"inputvalue\" type=\"text\" onkeypress=\"handleKeyPress(event)\"\r\n");
      out.write("					 name=\"chatContent\" placeholder=\"채팅창\">\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("			<!--  엔터를 누르면 채팅이 입력이 되도록 처리 -->\r\n");
      out.write("		</div>\r\n");
      out.write("		<!-- 채팅-->\r\n");
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
