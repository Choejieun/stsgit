package com.peisia.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

@Log4j
@RequestMapping("/test/*")
@AllArgsConstructor
@Controller
public class OpenApiController {
	
	// GET 방식으로 "/test/test" 경로에 대한 요청을 처리하는 메서드
	@GetMapping("/test")
	public void cyphersSearchPage() {
	    log.info("rsfs");

	    String serviceKey = "7ff23dcb-37e8-44e9-989e-f18780fc8ed4";
	    StringBuilder urlBuilder = new StringBuilder("http://api.kcisa.kr/openapi/API_CNV_060/request");
	    urlBuilder.append("?" + URLEncoder.encode("serviceKey", "UTF-8") + "=" + serviceKey);
	    urlBuilder.append("&" + URLEncoder.encode("numOfRows", "UTF-8") + "=" + URLEncoder.encode("10", "UTF-8"));
	    urlBuilder.append("&" + URLEncoder.encode("pageNo", "UTF-8") + "=" + URLEncoder.encode("0", "UTF-8"));

	    try {
	        URL url = new URL(urlBuilder.toString());
	        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	        conn.setRequestMethod("GET");
	        conn.setRequestProperty("Content-type", "application/json");

	        BufferedReader rd;
	        if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
	            InputStream inputStream = conn.getInputStream();
	            rd = new BufferedReader(new InputStreamReader(inputStream));

	            String contentType = conn.getHeaderField("Content-Type");
	            if (contentType != null && contentType.contains("text/xml")) {
	                ObjectMapper xmlMapper = new XmlMapper();
	                String jsonResult = xmlMapper.readValue(inputStream, Object.class).toString();
	                log.info("Converted JSON Result: " + jsonResult);
	            } else {
	                StringBuilder responseContent = new StringBuilder();
	                String line;
	                while ((line = rd.readLine()) != null) {
	                    responseContent.append(line);
	                }
	                log.info("Response Content: " + responseContent.toString());
	            }
	        } else {
	            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
	            String errorMessage = rd.lines().collect(Collectors.joining("\n"));
	            log.error("HTTP Error: " + conn.getResponseCode() + " " + errorMessage);
	        }

	        rd.close();
	        conn.disconnect();
	    } catch (IOException e) {
	        log.error("Error making API request: " + e.getMessage(), e);
	    }
	}

