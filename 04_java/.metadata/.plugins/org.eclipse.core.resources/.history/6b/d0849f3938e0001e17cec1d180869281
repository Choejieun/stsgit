package com.peisia.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Map;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import lombok.AllArgsConstructor;
import lombok.extern.log4j.Log4j;

// Log4j 어노테이션을 사용하여 로그를 기록할 Logger 객체를 생성
@Log4j
// 이 컨트롤러 클래스의 요청 매핑(prefix)을 "/test/*"로 설정. 프로젝트 루트 경로 이하의 "/test" 상위 폴더로 진입 시 이 컨트롤러로 요청이 전달됨.
@RequestMapping("/test/*")
// Lombok의 @AllArgsConstructor를 사용하여 필드 값을 매개변수로 하는 생성자를 자동으로 생성. 스프링이 객체를 관리할 때 이 생성자를 활용.
//@AllArgsConstructor
// 이 클래스를 컨트롤러로서 동작하도록 Spring에게 알림.
@Controller
public class OpenApiController {
	
	// GET 방식으로 "/test/test" 경로에 대한 요청을 처리하는 메서드
	@GetMapping("/test")
	public void cyphersSearchPage() {
	    // 로그 메시지
	    log.info("rsfs");

	    // API 키
	    String serviceKey = "7ff23dcb-37e8-44e9-989e-f18780fc8ed4";
	    // API URL
	    StringBuilder urlBuilder = new StringBuilder("http://api.kcisa.kr/openapi/API_CNV_060/request");
	    // URL에 파라미터 추가
	    urlBuilder.append("?" + URLEncoder.encode("serviceKey", "UTF-8") + "=" + serviceKey);
	    urlBuilder.append("&" + URLEncoder.encode("numOfRows", "UTF-8") + "=" + URLEncoder.encode("10", "UTF-8"));
	    urlBuilder.append("&" + URLEncoder.encode("pageNo", "UTF-8") + "=" + URLEncoder.encode("0", "UTF-8"));

	    try {
	        // URL 객체 생성
	        URL url = new URL(urlBuilder.toString());
	        // HTTP 연결 열기
	        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
	        // 요청 메소드 설정
	        conn.setRequestMethod("GET");
	        // 요청 헤더 설정

	        // 성공적인 응답일 경우
	        if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
	            // 응답 내용을 읽어올 InputStream 객체 생성
	            InputStream inputStream = conn.getInputStream();
	            // 응답 헤더의 Content-Type 체크
	            String contentType = conn.getHeaderField("Content-Type");

	            // XML 응답인 경우
	            if (contentType != null && contentType.contains("text/xml")) {
	                // XML을 JSON으로 변환
	                ObjectMapper xmlMapper = new XmlMapper();
	                // XML을 읽어 JSON 문자열로 변환
	                String jsonResult = xmlMapper.readValue(inputStream, Object.class).toString();
	                // JSON 결과 로깅
	                log.info("변환된 JSON 결과: " + jsonResult);
	            } else {
	                // 응답 내용을 그대로 출력
	                StringBuilder sb = new StringBuilder();
	                String line;
	                BufferedReader rd = new BufferedReader(new InputStreamReader(inputStream));
	                while ((line = rd.readLine()) != null) {
	                    sb.append(line);
	                }
	                log.info("응답 내용: " + sb.toString());
	            }
	        } else {
	            // 에러 스트림으로부터 읽어올 BufferedReader 객체 생성
	            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
	            String errorMessage = rd.lines().collect(Collectors.joining("\n"));
	            log.error("HTTP 오류: " + conn.getResponseCode() + " " + errorMessage);
	        }

	        // HTTP 연결 닫기
	        conn.disconnect();
	    } catch (IOException e) {
	        log.error("API 요청 오류: " + e.getMessage(), e);
	    }
	}
